{"version":3,"file":"static/js/691.6f03f2a5.chunk.js","mappings":"4OAiCA,EA9BgB,SAAC,GAAe,IAAbA,EAAY,EAAZA,MAEfC,EAOED,EAPFC,GACAC,EAMEF,EANFE,MACAC,EAKEH,EALFG,SACAC,EAIEJ,EAJFI,aACAC,EAGEL,EAHFK,aACAC,EAEEN,EAFFM,YACAC,EACEP,EADFO,OAGIC,EAAQC,KAAKC,MAAqB,GAAfN,GAEnBO,EAAO,IAAIC,KAAKA,KAAKC,MAAMR,IAAeS,cAEhD,OACE,4BACE,0BACGZ,EAAM,KAAGS,EAAK,QAEjB,gBAAKI,IAAG,0CAAqCT,GAAeU,IAAKd,KACjE,yBAAG,eAAaM,EAAM,QACtB,wBAAI,YACJ,8BAAGD,GAAUA,EAAOU,KAAI,gBAAGC,EAAH,EAAGA,KAAH,OAAc,uBAAeA,GAAPA,EAAtB,OACxB,wBAAI,cACJ,uBAAIf,MATIF,EAYb,ECsCD,EA/DqB,WAAO,IAAD,IACnBkB,GAAWC,EAAAA,EAAAA,MACXC,GAAoBC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,KAEzD,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOzB,EAAP,KAAc0B,EAAd,KAEQzB,GAAO0B,EAAAA,EAAAA,MAAP1B,GAsCR,OApCA2B,EAAAA,EAAAA,YAAU,YAENC,EAAAA,EAAAA,IAAgB5B,GACb6B,MAAK,SAAAC,GACJ,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAMF,EAASG,QAE3B,OAAOH,EAASI,MACjB,IACAL,MAAK,SAAAM,GACJ,IACEnC,EAOEmC,EAPFnC,GACAC,EAMEkC,EANFlC,MACAC,EAKEiC,EALFjC,SACAI,EAIE6B,EAJF7B,OACAH,EAGEgC,EAHFhC,aACAC,EAEE+B,EAFF/B,aACAC,EACE8B,EADF9B,YAEFoB,EAAS,CACPzB,GAAAA,EACAC,MAAAA,EACAC,SAAAA,EACAI,OAAAA,EACAH,aAAAA,EACAC,aAAAA,EACAC,YAAAA,GAEH,IACA+B,OAAM,SAAAC,GACLC,QAAQC,IAAIF,EACb,GAGN,GAAE,CAACrC,KAGF,iCACE,SAAC,KAAD,CAAMwC,GAAIpB,EAAkBqB,QAA5B,SAAqC,aACrC,SAAC,EAAD,CAAS1C,MAAOA,KAChB,2BACE,yBACE,SAAC,KAAD,CAAMyC,GAAG,OAAT,SAAgB,YAElB,yBACE,SAAC,KAAD,CAAMA,GAAG,UAAT,SAAmB,kBAGvB,SAAC,EAAAE,SAAD,CAAUC,UAAU,yBAAK,eAAzB,UACE,SAAC,KAAD,QAIP,C,uJCnED,IAAMC,EAAU,mCAEVC,EAAW,gCAEXC,EAAgB,SAKTC,EAAoB,WAC/B,OAAOC,MAAM,GAAD,OAAIH,GAAJ,OAPA,qBAOA,oBAAgCD,GAC7C,EAEYhB,EAAkB,SAAA5B,GAC7B,OAAOgD,MAAM,GAAD,OAAIH,GAAJ,OAAeC,GAAf,OAA+B9C,EAA/B,oBAA6C4C,GAC1D,EAEYK,EAAU,SAAAjD,GACrB,OAAOgD,MAAM,GAAD,OAAIH,GAAJ,OAAeC,GAAf,OAA+B9C,GAA/B,OAbD,WAaC,oBAAoD4C,GACjE,EAEYM,EAAa,SAAAlD,GACxB,OAAOgD,MAAM,GAAD,OAAIH,GAAJ,OAAeC,GAAf,OAA+B9C,GAA/B,OAhBE,WAgBF,oBAAuD4C,GACpE,EAEYO,EAAiB,SAAAC,GAC5B,OAAOJ,MAAM,GAAD,OAAIH,GAAJ,OAnBC,uBAmBD,OAAwBO,EAAxB,oBAAyCR,GACtD,C","sources":["components/MovieEl/MovieEl.jsx","pages/MovieDetails.js","services/getMovies.js"],"sourcesContent":["import PropTypes from 'prop-types';\n// import { Container } from './HomeStyled';\n\nconst MovieEl = ({ movie }) => {\n  const {\n    id,\n    title,\n    overview,\n    vote_average,\n    release_date,\n    poster_path,\n    genres,\n  } = movie;\n\n  const score = Math.round(vote_average * 10);\n\n  const year = new Date(Date.parse(release_date)).getFullYear();\n\n  return (\n    <div key={id}>\n      <h1>\n        {title} ({year})\n      </h1>\n      <img src={`https://image.tmdb.org/t/p/w200/${poster_path}`} alt={title} />\n      <p>User Score: {score}%</p>\n      <h3>Genres</h3>\n      <>{genres && genres.map(({ name }) => <p key={name}>{name}</p>)}</>\n      <h2>Overview</h2>\n      <p>{overview}</p>\n    </div>\n  );\n};\n\nexport default MovieEl;\n\nMovieEl.propTypes = {\n  movie: PropTypes.arrayOf(PropTypes.string),\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  overview: PropTypes.string.isRequired,\n  vote_average: PropTypes.string.isRequired,\n  release_date: PropTypes.string.isRequired,\n  poster_path: PropTypes.string.isRequired,\n  genres: PropTypes.arrayOf(PropTypes.string),\n};\n","import { useState, useEffect, useRef, Suspense } from 'react';\nimport { Link, Outlet, useParams, useLocation } from 'react-router-dom';\n\nimport { getMovieDetails } from '../services/getMovies';\nimport MovieEl from '../components/MovieEl/MovieEl';\n\nconst MovieDetails = () => {\n  const location = useLocation();\n  const goBackLocationRef = useRef(location.state?.from ?? '/');\n\n  const [movie, setMovie] = useState([]);\n\n  const { id } = useParams();\n\n  useEffect(() => {\n    const fetchDetails = () => {\n      getMovieDetails(id)\n        .then(response => {\n          if (!response.ok) {\n            throw new Error(response.status);\n          }\n          return response.json();\n        })\n        .then(movieEl => {\n          const {\n            id,\n            title,\n            overview,\n            genres,\n            vote_average,\n            release_date,\n            poster_path,\n          } = movieEl;\n          setMovie({\n            id,\n            title,\n            overview,\n            genres,\n            vote_average,\n            release_date,\n            poster_path,\n          });\n        })\n        .catch(error => {\n          console.log(error);\n        });\n    };\n    fetchDetails();\n  }, [id]);\n\n  return (\n    <>\n      <Link to={goBackLocationRef.current}>Go back</Link>\n      <MovieEl movie={movie} />\n      <ul>\n        <li>\n          <Link to=\"cast\">Cast</Link>\n        </li>\n        <li>\n          <Link to=\"reviews\">Reviews</Link>\n        </li>\n      </ul>\n      <Suspense fallback={<div>Loading...</div>}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default MovieDetails;\n","const API_KEY = '4b1c3558eb2d79dd671ee6aeceadbb9c';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst TREND = 'trending/movie/day';\nconst MOVIE_DETAILS = 'movie/';\nconst CAST = '/credits';\nconst REVIEWS = '/reviews';\nconst SEARCH = 'search/movie?query=';\n\nexport const getTrendingMovies = () => {\n  return fetch(`${BASE_URL}${TREND}?api_key=${API_KEY}`);\n};\n\nexport const getMovieDetails = id => {\n  return fetch(`${BASE_URL}${MOVIE_DETAILS}${id}?api_key=${API_KEY}`);\n};\n\nexport const getCast = id => {\n  return fetch(`${BASE_URL}${MOVIE_DETAILS}${id}${CAST}?api_key=${API_KEY}`);\n};\n\nexport const getReviews = id => {\n  return fetch(`${BASE_URL}${MOVIE_DETAILS}${id}${REVIEWS}?api_key=${API_KEY}`);\n};\n\nexport const getSearchMovie = query => {\n  return fetch(`${BASE_URL}${SEARCH}${query}&api_key=${API_KEY}`);\n};\n"],"names":["movie","id","title","overview","vote_average","release_date","poster_path","genres","score","Math","round","year","Date","parse","getFullYear","src","alt","map","name","location","useLocation","goBackLocationRef","useRef","state","from","useState","setMovie","useParams","useEffect","getMovieDetails","then","response","ok","Error","status","json","movieEl","catch","error","console","log","to","current","Suspense","fallback","API_KEY","BASE_URL","MOVIE_DETAILS","getTrendingMovies","fetch","getCast","getReviews","getSearchMovie","query"],"sourceRoot":""}